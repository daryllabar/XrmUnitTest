//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DLaB.Xrm.Entities
{
	
	/// <summary>
	/// Data Performance Dashboard.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dataperformance")]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("CrmSvcUtil", "9.0.0.9369")]
	public partial class DataPerformance : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		public static class Fields
		{
			public const string AnyOptimizationApplied = "anyoptimizationapplied";
			public const string AnyOptimizationAvailable = "anyoptimizationavailable";
			public const string Component = "component";
			public const string Count = "count";
			public const string DataPerformanceId = "dataperformanceid";
			public const string Id = "dataperformanceid";
			public const string Entity = "entity";
			public const string EstimatedOptimizationImpact = "estimatedoptimizationimpact";
			public const string ExecutionPeriod = "executionperiod";
			public const string LastActionResult = "lastactionresult";
			public const string LastOptimizationDate = "lastoptimizationdate";
			public const string MaxTime = "maxtime";
			public const string MedianTime = "mediantime";
			public const string MinTime = "mintime";
			public const string Operation = "operation";
			public const string OptimizationStatus = "optimizationstatus";
			public const string OptimizationStorage = "optimizationstorage";
			public const string OrganizationId = "organizationid";
			public const string RealizedOptimizationImpact = "realizedoptimizationimpact";
			public const string Solution = "solution";
			public const string Weight = "weight";
			public const string lk_dataperformance_organizationid = "lk_dataperformance_organizationid";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public DataPerformance() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "dataperformance";
		
		public const string PrimaryIdAttribute = "dataperformanceid";
		
		public const int EntityTypeCode = 4450;
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// An internal state which indicates whether at least one optimization is applied.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("anyoptimizationapplied")]
		public System.Nullable<bool> AnyOptimizationApplied
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("anyoptimizationapplied");
			}
		}
		
		/// <summary>
		/// An internal state which indicates whether at least one optimization is available for this record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("anyoptimizationavailable")]
		public System.Nullable<bool> AnyOptimizationAvailable
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("anyoptimizationavailable");
			}
		}
		
		/// <summary>
		/// Name of the component
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("component")]
		public string Component
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("component");
			}
		}
		
		/// <summary>
		/// Number of times a queries were executed (Aggregated)
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("count")]
		public System.Nullable<int> Count
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("count");
			}
		}
		
		/// <summary>
		/// Unique identifier of the performance suggestion.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("dataperformanceid")]
		public System.Nullable<System.Guid> DataPerformanceId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("dataperformanceid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("DataPerformanceId");
				this.SetAttributeValue("dataperformanceid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
				this.OnPropertyChanged("DataPerformanceId");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("dataperformanceid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.DataPerformanceId = value;
			}
		}
		
		/// <summary>
		/// Primary entity
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entity")]
		public string Entity
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("entity");
			}
		}
		
		/// <summary>
		/// The expected average cost benefit of an optimization.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("estimatedoptimizationimpact")]
		public System.Nullable<decimal> EstimatedOptimizationImpact
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("estimatedoptimizationimpact");
			}
		}
		
		/// <summary>
		/// The execution period for which the performance metrics are calculated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("executionperiod")]
		public string ExecutionPeriod
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("executionperiod");
			}
		}
		
		/// <summary>
		/// An internal state which shows the result of the last action that was taken on this record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("lastactionresult")]
		public string LastActionResult
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("lastactionresult");
			}
		}
		
		/// <summary>
		/// Last time an optimization was applied.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("lastoptimizationdate")]
		public System.Nullable<System.DateTime> LastOptimizationDate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("lastoptimizationdate");
			}
		}
		
		/// <summary>
		/// Maximum execution time in seconds. (Aggregated)
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("maxtime")]
		public System.Nullable<decimal> MaxTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("maxtime");
			}
		}
		
		/// <summary>
		/// Average execution time in seconds. (Aggregated)
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("mediantime")]
		public System.Nullable<decimal> MedianTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("mediantime");
			}
		}
		
		/// <summary>
		/// Minimum execution time in seconds. (Aggregated)
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("mintime")]
		public System.Nullable<decimal> MinTime
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("mintime");
			}
		}
		
		/// <summary>
		/// Data operation that triggered the query (Retrieve Multiple, etc.)
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("operation")]
		public string Operation
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("operation");
			}
		}
		
		/// <summary>
		/// Current optimization status of the record, showed to the customer.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("optimizationstatus")]
		public string OptimizationStatus
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("optimizationstatus");
			}
		}
		
		/// <summary>
		/// Storage consumed by the optimization. (MB)
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("optimizationstorage")]
		public System.Nullable<decimal> OptimizationStorage
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("optimizationstorage");
			}
		}
		
		/// <summary>
		/// Unique identifier of the organization associated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		public Microsoft.Xrm.Sdk.EntityReference OrganizationId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("organizationid");
			}
		}
		
		/// <summary>
		/// Actual performance change after taking an optimization action on the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("realizedoptimizationimpact")]
		public string RealizedOptimizationImpact
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("realizedoptimizationimpact");
			}
		}
		
		/// <summary>
		/// Name of the solution that owns the component
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solution")]
		public string Solution
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("solution");
			}
		}
		
		/// <summary>
		/// Query Weight of the component. Factored with the Optimization Impact to determine the overall importance of applying an optimization. (P2)
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("weight")]
		public System.Nullable<decimal> Weight
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("weight");
			}
		}
		
		/// <summary>
		/// N:1 lk_dataperformance_organizationid
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_dataperformance_organizationid")]
		public DLaB.Xrm.Entities.Organization lk_dataperformance_organizationid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<DLaB.Xrm.Entities.Organization>("lk_dataperformance_organizationid", null);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public DataPerformance(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["dataperformanceid"] = base.Id;
                        break;
                    case "dataperformanceid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}