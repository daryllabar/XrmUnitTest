<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        7C5CAAAAAElFTkSuQmCC
</value>
  </data>
</root>